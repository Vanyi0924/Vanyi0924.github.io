import{_ as e,c as a,o as t,a4 as r}from"./chunks/framework.C5pyVv65.js";const y=JSON.parse('{"title":"ts常用知识点","description":"","frontmatter":{},"headers":[],"relativePath":"articles/TS/ts常用知识点.md","filePath":"articles/TS/ts常用知识点.md"}'),i={name:"articles/TS/ts常用知识点.md"},o=r('<h1 id="ts常用知识点" tabindex="-1">ts常用知识点 <a class="header-anchor" href="#ts常用知识点" aria-label="Permalink to &quot;ts常用知识点&quot;">​</a></h1><p>TypeScript 中的接口定义了对象结构的契约，指定其属性和方法的名称和类型。</p><h2 id="typescript-中的-keyof-关键字" tabindex="-1">TypeScript 中的“keyof”关键字 <a class="header-anchor" href="#typescript-中的-keyof-关键字" aria-label="Permalink to &quot;TypeScript 中的“keyof”关键字&quot;">​</a></h2><p>是一个类型运算符，返回表示对象键的文字类型的联合。</p><h2 id="typescript-中的-部分-实用程序类型" tabindex="-1">TypeScript 中的“部分”实用程序类型 <a class="header-anchor" href="#typescript-中的-部分-实用程序类型" aria-label="Permalink to &quot;TypeScript 中的“部分”实用程序类型&quot;">​</a></h2><p><code>Partial</code>类型用于使现有类型的所有属性成为可选</p><h2 id="interface-与-type-的相同点和区别" tabindex="-1">interface 与 type 的相同点和区别 <a class="header-anchor" href="#interface-与-type-的相同点和区别" aria-label="Permalink to &quot;interface 与 type 的相同点和区别&quot;">​</a></h2><h3 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h3><ol><li>都可以描述一个对象或者函数</li><li>允许拓展，语法不同</li></ol><h3 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h3><p>type 可以声明基本类型别名，联合类型，元组等类型 interface 能够声明合并</p>',11),c=[o];function s(l,p,n,h,d,_){return t(),a("div",null,c)}const u=e(i,[["render",s]]);export{y as __pageData,u as default};
