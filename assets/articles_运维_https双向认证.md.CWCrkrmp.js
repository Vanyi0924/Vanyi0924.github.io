import{_ as e,c as a,o as t,a4 as s}from"./chunks/framework.CQUZ9zPN.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/运维/https双向认证.md","filePath":"articles/运维/https双向认证.md"}'),n={name:"articles/运维/https双向认证.md"},r=s(`<h2 id="什么是双向认证" tabindex="-1">什么是双向认证？ <a class="header-anchor" href="#什么是双向认证" aria-label="Permalink to &quot;什么是双向认证？&quot;">​</a></h2><p>双向认证即客户端和服务器端都需要验证对方的身份。单向认证的过程，客户端从服务器端下载服务器端公钥证书进行验证，然后建立安全通信通道。双向通信流程，客户端除了需要从服务器端下载服务器的公钥证书进行验证外，还需要把客户端的公钥证书上传到服务器端给服务器端进行验证，等双方都认证通过了，才开始建立安全通信通道进行数据传输。</p><h2 id="单向认证流程" tabindex="-1">单向认证流程 <a class="header-anchor" href="#单向认证流程" aria-label="Permalink to &quot;单向认证流程&quot;">​</a></h2><p>单向认证流程中，服务器端保存着公钥证书和私钥两个文件，整个握手过程如下： <img src="https://assets.vanyi.top/imgs/%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81.webp" alt="单向认证"></p><h2 id="双向认证流程" tabindex="-1">双向认证流程 <a class="header-anchor" href="#双向认证流程" aria-label="Permalink to &quot;双向认证流程&quot;">​</a></h2><p><img src="https://assets.vanyi.top/imgs/%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81.webp" alt="双向认证"></p><p><a href="https://vanyi.top/article/ARTICLE_73187694a7dfd8-960a-490e-9903-e1d148c8758b983514" target="_blank" rel="noreferrer">使用<code>openssl </code> 生成自签名证书</a> 需要生成以下证书： CA证书（ca.csr，ca.key，ca.crt） 服务器端证书（server.csr，server.key，server.crt或使用第三方颁发的权威证书） 客户端证书（client.csr，client.key，client.crt） 客户端p12格式证书（client.p12）用于浏览器中</p><h2 id="nginx配置" tabindex="-1">Nginx配置 <a class="header-anchor" href="#nginx配置" aria-label="Permalink to &quot;Nginx配置&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># ...</span></span>
<span class="line"><span>ssl                  on;  </span></span>
<span class="line"><span>ssl_certificate      /yourpath/to/server.crt;  #server公钥证书 或 第三发颁发</span></span>
<span class="line"><span>ssl_certificate_key  /yourpath/to/server.key;  #server私钥 或 第三发颁发</span></span>
<span class="line"><span>ssl_client_certificate /yourpath/to/ca.crt;  # 生成的自签CA证书</span></span>
<span class="line"><span>ssl_verify_client on;  #开启客户端证书验证</span></span>
<span class="line"><span>ssl_crl /etc/pki/CA/crl/crl.pem; # 吊销证书文件 需要存在</span></span>
<span class="line"><span># ...</span></span></code></pre></div><p>参考资料： <a href="https://www.jianshu.com/p/2b2d1f511959?utm_campaign=haruki" target="_blank" rel="noreferrer">https://www.jianshu.com/p/2b2d1f511959?utm_campaign=haruki</a><a href="https://blog.csdn.net/endzhi/article/details/105002409" target="_blank" rel="noreferrer">https://blog.csdn.net/endzhi/article/details/105002409</a><a href="https://help.aliyun.com/document_detail/85954.html?spm=5176.14113079.0.dexternal.2df756a7V6Dup3" target="_blank" rel="noreferrer">https://help.aliyun.com/document_detail/85954.html?spm=5176.14113079.0.dexternal.2df756a7V6Dup3</a><a href="https://support.huaweicloud.com/usermanual-elb/zh_cn_elb_03_0006.html" target="_blank" rel="noreferrer">https://support.huaweicloud.com/usermanual-elb/zh_cn_elb_03_0006.html</a><a href="https://cloud.tencent.com/document/product/269/2714" target="_blank" rel="noreferrer">https://cloud.tencent.com/document/product/269/2714</a></p>`,10),l=[r];function c(p,i,o,h,d,_){return t(),a("div",null,l)}const f=e(n,[["render",c]]);export{m as __pageData,f as default};
