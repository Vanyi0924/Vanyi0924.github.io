import{_ as e,c as o,o as a,a4 as d}from"./chunks/framework.C5pyVv65.js";const _=JSON.parse('{"title":"Solidity学习-1","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Web3/Solidity学习-1.md","filePath":"articles/Web3/Solidity学习-1.md"}'),c={name:"articles/Web3/Solidity学习-1.md"},t=d('<h1 id="solidity学习-1" tabindex="-1">Solidity学习-1 <a class="header-anchor" href="#solidity学习-1" aria-label="Permalink to &quot;Solidity学习-1&quot;">​</a></h1><h2 id="一、整型" tabindex="-1">一、整型 <a class="header-anchor" href="#一、整型" aria-label="Permalink to &quot;一、整型&quot;">​</a></h2><p><code>int</code> / <code>uint</code> ：分别表示有符号和无符号的不同位数的整型变量。 支持关键字 <code>uint8</code> 到 <code>uint256</code> （无符号，从 8 位到 256 位）以及 <code>int8</code> 到 <code>int256</code>，以 8 位为步长递增。 <code>uint</code> 和 <code>int</code> 分别是 <code>uint256</code> 和 <code>int256</code> 的别名。 <code>uint8</code> 的长度为 <code>2**8 - 1</code> 即：[0, 255]，<code>int8</code>即[-128,127]； 需要注意整型溢出的问题，属于程序问题 解决方案：</p><ol><li>使用<code>assert</code> 断言</li><li>使用 <code>safemath</code> 库</li></ol><h2 id="二、地址" tabindex="-1">二、地址 <a class="header-anchor" href="#二、地址" aria-label="Permalink to &quot;二、地址&quot;">​</a></h2><p>以太坊中的地址的长度为20字节，一字节等于8位，一共160位，所以<code>address</code>也可以用<code>uint160</code>来声明。以太坊钱包地址是以16进制的形式呈现，十六进制的数字占4位，<code>160 ／ 4 = 40</code>，所以钱包地址的长度为40。</p><h2 id="三、memory-与-storage" tabindex="-1">三、memory 与 storage <a class="header-anchor" href="#三、memory-与-storage" aria-label="Permalink to &quot;三、memory 与 storage&quot;">​</a></h2><p>memory关键字告诉solidity应当在该函数运行时为变量创建一块空间，使其大小和结构满足函数运行的需要。 Storage 变量是指永久存储在区块链中的变量。 Memory 变量则是临时的，当外部函数对某合约调用完成时，内存型变量即被移除。 局部变量默认是storage类型，状态变量是强制为storage类型。</p><p><a href="https://learnblockchain.cn/docs/solidity/cheatsheet.html#id3" target="_blank" rel="noreferrer">速查表</a></p><h2 id="四、转账" tabindex="-1">四、转账 <a class="header-anchor" href="#四、转账" aria-label="Permalink to &quot;四、转账&quot;">​</a></h2><p>4.1 <code>transfer()</code> 从当前合约向某个地址转资产，大多数情况使用 4.2 <code>send()</code> 发生异常时，不抛出错误，返回<code>false</code>，所以使用时需要检查返回值 异常： <code>Gas</code> 花费超过 2300</p><p>相同点： 都有 <code>2300 gas</code> 限制，当合约接收以太币时，很容易失败，以下操作消耗会大于 <code>2300 gas</code>：</p><blockquote></blockquote><ol><li>写入储存（storage）</li><li>创建一个合约</li><li>执行一个外部(external)函数调用，会花费很多<code>gas</code></li><li>发送 <code>ether</code></li></ol><p>4.3 <code>call()</code> 合约环境是调用的合约环境 4.4 <code>delegatecall()</code> 合约环境是当前合约环境，地址为发起调用的账号地址</p><p>即<code>call()</code> ，<code>delegatecall()</code>本质区别</p><h2 id="五、函数类型" tabindex="-1">五、函数类型 <a class="header-anchor" href="#五、函数类型" aria-label="Permalink to &quot;五、函数类型&quot;">​</a></h2><ol><li>外部函数（<code>external</code>） 消耗 <code>gas</code> 比较多</li><li>内部函数（<code>internal</code>）</li><li>函数选择器（<code>selector</code>） 返回一个哈希值，<code>EVM</code>中实际上通过该哈希值进行函数匹配的，只有外部函数拥有。</li></ol><h2 id="六、引用类型" tabindex="-1">六、引用类型 <a class="header-anchor" href="#六、引用类型" aria-label="Permalink to &quot;六、引用类型&quot;">​</a></h2><p>与<code>JavaScript</code>中表现一致 储存位置：<code>storage</code>（区块链中）、<code>memory</code>（EVM内存中）</p><ol><li><code>storage </code> 状态变量，复杂类型的局部变量</li><li><code>memory</code> 局部变量即参数</li><li>数组 <code>length</code> 获取长度 <code>push</code> 添加元素，仅限变长数组，<code>memory</code>数组不支持</li></ol><h2 id="七、-字节-bytes-与字符串-string" tabindex="-1">七、 字节(bytes)与字符串(string) <a class="header-anchor" href="#七、-字节-bytes-与字符串-string" aria-label="Permalink to &quot;七、 字节(bytes)与字符串(string)&quot;">​</a></h2><p>字符串库（<code>solidity-stringutils</code>）</p>',23),i=[t];function l(r,s,n,h,m,p){return a(),o("div",null,i)}const b=e(c,[["render",l]]);export{_ as __pageData,b as default};
