import{_ as e,c as a,o as s,a4 as i}from"./chunks/framework.C5pyVv65.js";const f=JSON.parse('{"title":"DApp与Truffle开发的智能合约交互","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Web3/DApp与Truffle开发的智能合约交互.md","filePath":"articles/Web3/DApp与Truffle开发的智能合约交互.md"}'),t={name:"articles/Web3/DApp与Truffle开发的智能合约交互.md"},r=i(`<h1 id="dapp与truffle开发的智能合约交互" tabindex="-1">DApp与Truffle开发的智能合约交互 <a class="header-anchor" href="#dapp与truffle开发的智能合约交互" aria-label="Permalink to &quot;DApp与Truffle开发的智能合约交互&quot;">​</a></h1><h2 id="一、安装" tabindex="-1">一、安装 <a class="header-anchor" href="#一、安装" aria-label="Permalink to &quot;一、安装&quot;">​</a></h2><p><code>npm install web3 truffle @truffle/contract</code></p><h2 id="二、实例化web3" tabindex="-1">二、实例化web3 <a class="header-anchor" href="#二、实例化web3" aria-label="Permalink to &quot;二、实例化web3&quot;">​</a></h2><p><code>web3 = new Web3(Web3.givenProvider || &quot;ws://localhost:8545&quot;);</code></p><blockquote><p>然后你需要创建一个 web3 的实例，设置一个 provider。 支持以太坊的浏览器如 Mist 或 MetaMask 会有提供一个 ethereumProvider 或 web3.currentProvider。对于 web3.js 来说，可以检查 Web3.givenProvider ，如果属性为 null 再连接本地或远程的节点。</p></blockquote><blockquote><p>新的 Dapp 浏览器或 MetaMask 的新版本，注入了一个 ethereum 对象到 window 对象里，使用 ethereum.enable() 来请求用户授权访问链接账号。<code>if (window.ethereum) window.ethereum.enable()</code></p></blockquote><h2 id="三、实例化智能合约" tabindex="-1">三、实例化智能合约 <a class="header-anchor" href="#三、实例化智能合约" aria-label="Permalink to &quot;三、实例化智能合约&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyContract </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TruffleContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Adoption)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MyContract.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(web3.currentProvider);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.contract </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyContract.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deployed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="四、调用合约方法" tabindex="-1">四、调用合约方法 <a class="header-anchor" href="#四、调用合约方法" aria-label="Permalink to &quot;四、调用合约方法&quot;">​</a></h2><p><code>this.contract.yourMethod(args, { from: accounts[0] })</code> 这里与不使用 <code>truffle</code> 调用有一些差别</p>`,11),l=[r];function n(o,h,p,d,c,k){return s(),a("div",null,l)}const b=e(t,[["render",n]]);export{f as __pageData,b as default};
