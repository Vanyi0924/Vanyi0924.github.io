import{_ as i,c as s,o as a,a4 as e}from"./chunks/framework.C5pyVv65.js";const g=JSON.parse('{"title":"Solidity学习-3","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Web3/Solidity学习-3.md","filePath":"articles/Web3/Solidity学习-3.md"}'),l={name:"articles/Web3/Solidity学习-3.md"},t=e(`<h1 id="solidity学习-3" tabindex="-1">Solidity学习-3 <a class="header-anchor" href="#solidity学习-3" aria-label="Permalink to &quot;Solidity学习-3&quot;">​</a></h1><h2 id="一、函数修改器-modifier" tabindex="-1">一、函数修改器（modifier） <a class="header-anchor" href="#一、函数修改器-modifier" aria-label="Permalink to &quot;一、函数修改器（modifier）&quot;">​</a></h2><ol><li>可以被继承</li><li>可以传递参数</li><li>多个可以同时使用，使用空格隔开</li><li>在修改器或函数体内使用<code>return</code>语句，仅会跳出当前修改器或函数，<code>_</code>会继续执行。</li></ol><h2 id="二、payable" tabindex="-1">二、payable <a class="header-anchor" href="#二、payable" aria-label="Permalink to &quot;二、payable&quot;">​</a></h2><p>表示函数可以接受以太币进行调用</p><h2 id="三、view" tabindex="-1">三、view <a class="header-anchor" href="#三、view" aria-label="Permalink to &quot;三、view&quot;">​</a></h2><p>一个函数不能修改状态。 被认为修改了状态的操作有：</p><ol><li>写状态变量</li><li>触发事件（event）</li><li>创建其他合约</li><li><code>call</code>调用附加了以太币</li><li>调用了任何没有被<code>view</code> 或 <code>pure</code>修饰的函数</li><li>使用了低级别的调用</li></ol><h2 id="四、pure" tabindex="-1">四、pure <a class="header-anchor" href="#四、pure" aria-label="Permalink to &quot;四、pure&quot;">​</a></h2><p>一个函数不读取状态，也不修改状态。</p><ol><li>读状态变量</li><li>访问了<code>.balance</code>属性</li><li>访问了<code>block</code>、<code>tx</code>、<code>msg</code>成员（<code>msg.sig</code> 和 <code>msg.data</code>）除外</li><li>调用了任何没有<code>pure</code>修饰的函数</li></ol><h2 id="五、继承" tabindex="-1">五、继承 <a class="header-anchor" href="#五、继承" aria-label="Permalink to &quot;五、继承&quot;">​</a></h2><ol><li>继承的合约可以访问所有非 <code>private</code> 成员</li><li><code>is</code>可用于继承，或者通过复制代码实现继承 可见性：<code>external</code>，<code>public</code>，<code>internal</code>，<code>private</code></li><li>构造函数：派生合约需要调用父合约的构造函数，如果有参数则需要提供参数调用父合约的构造函数。</li></ol><h2 id="六、事件监听" tabindex="-1">六、事件监听 <a class="header-anchor" href="#六、事件监听" aria-label="Permalink to &quot;六、事件监听&quot;">​</a></h2><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  v1.3.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">event</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SetSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">emit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SetSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, age);</span></span></code></pre></div><p>对于触发的事件，可以直接通过 <code>Promise</code> 对象获取结果</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yourContract.methods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yourMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      from: xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.events);</span></span></code></pre></div>`,17),n=[t];function o(h,d,p,r,c,k){return a(),s("div",null,n)}const y=i(l,[["render",o]]);export{g as __pageData,y as default};
