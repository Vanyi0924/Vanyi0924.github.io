import{_ as e,c as a,o as t,a4 as V}from"./chunks/framework.Ci4AqDqK.js";const h=JSON.parse('{"title":"MVVM","description":"","frontmatter":{},"headers":[],"relativePath":"articles/设计模式/3.MVVM.md","filePath":"articles/设计模式/3.MVVM.md"}'),M={name:"articles/设计模式/3.MVVM.md"},o=V('<h1 id="mvvm" tabindex="-1">MVVM <a class="header-anchor" href="#mvvm" aria-label="Permalink to &quot;MVVM&quot;">​</a></h1><h2 id="mvvm-是什么" tabindex="-1">MVVM 是什么？ <a class="header-anchor" href="#mvvm-是什么" aria-label="Permalink to &quot;MVVM 是什么？&quot;">​</a></h2><p>MVVM（Model-View-ViewModel）是一种软件架构模式，用于分离用户界面（View）的开发与业务逻辑（ViewModel）的开发，它可以使开发人员能够更好地管理和维护用户界面和业务逻辑之间的关系。</p><p>MVVM 由 Model、View、ViewModel 三部分构成:</p><ul><li>模型（Model）: 代表数据模型，表示应用程序的数据和业务逻辑；</li><li>视图（View）: 是用户界面的可视化部分,也就是我们写的 HTML,CSS,和模板；</li><li>视图模型（ViewModel）: 是 MVVM 中的核心，是视图和模型之间的连接器，负责处理视图和模型之间的数据传递和交互。其核心是提供对 View 和 Model 的双向数据绑定，ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 DOM， 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</li></ul><h2 id="mvvm-模式和-vue-的关系" tabindex="-1">MVVM 模式和 VUE 的关系？ <a class="header-anchor" href="#mvvm-模式和-vue-的关系" aria-label="Permalink to &quot;MVVM 模式和 VUE 的关系？&quot;">​</a></h2><p>MVVM 是一种软件架构模式，VUE 就是 MVVM 中 ViewModel 层的一个实现者，vue 通过数据绑定和 DOM 监听实现了双向数据绑定，vue2 通过 <code>Object.defineProperty</code> 劫持数据的 getter 和 setter 能够监听到数据的变化，并对视图的内容进行更新，也能够通过 DOM 事件监听到视图的变化，并通知数据发送改变。</p>',7),i=[o];function l(r,d,c,s,_,n){return t(),a("div",null,i)}const p=e(M,[["render",l]]);export{h as __pageData,p as default};
